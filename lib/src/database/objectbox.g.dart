// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../src/database/model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 7500374954732282090),
      name: 'DataMessage',
      lastPropertyId: const IdUid(15, 3882290172258990645),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(2, 1545068481723978007),
            name: 'topic',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5629718895506784170),
            name: 'from',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6244017526639838738),
            name: 'ts',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3343702600643972194),
            name: 'seq',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8497395922862948872),
            name: 'noForwarding',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1361745614401308380),
            name: 'hi',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6768784378071748402),
            name: 'mark',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8080767349429141016),
            name: 'dbHead',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4732332771195243480),
            name: 'dbContent',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2676264290457955547),
            name: 'combinedId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 6669793052934164781)),
        ModelProperty(
            id: const IdUid(14, 6562255994424126639),
            name: 'localTopicId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 5365880262889030653),
            relationTarget: 'LocalTopic'),
        ModelProperty(
            id: const IdUid(15, 3882290172258990645),
            name: 'id',
            type: 6,
            flags: 129)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 7523939529630017019),
      name: 'LocalTopic',
      lastPropertyId: const IdUid(2, 4984847510489244727),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1480729267301426515),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4984847510489244727),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'messages', srcEntity: 'DataMessage', srcField: 'localTopic')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(7, 7523939529630017019),
      lastIndexId: const IdUid(5, 5365880262889030653),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        7595507953879236273,
        5825008752108115567,
        4669327825780138909,
        1418740078404418352,
        1986949763417790528
      ],
      retiredIndexUids: const [3734032233424004645, 4524952478530561359],
      retiredPropertyUids: const [
        8401172950085984679,
        6653102471760011849,
        7139542189916757959,
        5632662201352881675,
        8491904116446346437,
        8551816917586839958,
        5860732589279765184,
        8787319704378319453,
        480838723607652497,
        1614294361819380032,
        9113196365372014521,
        2273434555358412392,
        8514496487745646617,
        1766405141132696244,
        5442303229141186181,
        645643751041858705
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    DataMessage: EntityDefinition<DataMessage>(
        model: _entities[0],
        toOneRelations: (DataMessage object) => [object.localTopic],
        toManyRelations: (DataMessage object) => {},
        getId: (DataMessage object) => object.id,
        setId: (DataMessage object, int id) {
          object.id = id;
        },
        objectToFB: (DataMessage object, fb.Builder fbb) {
          final topicOffset =
              object.topic == null ? null : fbb.writeString(object.topic!);
          final fromOffset =
              object.from == null ? null : fbb.writeString(object.from!);
          final dbHeadOffset =
              object.dbHead == null ? null : fbb.writeString(object.dbHead!);
          final dbContentOffset = object.dbContent == null
              ? null
              : fbb.writeString(object.dbContent!);
          final combinedIdOffset = object.combinedId == null
              ? null
              : fbb.writeString(object.combinedId!);
          fbb.startTable(16);
          fbb.addOffset(1, topicOffset);
          fbb.addOffset(2, fromOffset);
          fbb.addInt64(3, object.ts?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.seq);
          fbb.addBool(5, object.noForwarding);
          fbb.addInt64(6, object.hi);
          fbb.addInt64(7, object.mark);
          fbb.addOffset(8, dbHeadOffset);
          fbb.addOffset(9, dbContentOffset);
          fbb.addOffset(11, combinedIdOffset);
          fbb.addInt64(13, object.localTopic.targetId);
          fbb.addInt64(14, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final tsValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = DataMessage(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0),
              topic: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              from: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              ts: tsValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(tsValue),
              seq: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              noForwarding: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              hi: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              combinedId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26))
            ..mark = const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..dbHead = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..dbContent = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22);
          object.localTopic.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.localTopic.attach(store);
          return object;
        }),
    LocalTopic: EntityDefinition<LocalTopic>(
        model: _entities[1],
        toOneRelations: (LocalTopic object) => [],
        toManyRelations: (LocalTopic object) => {
              RelInfo<DataMessage>.toOneBacklink(14, object.id,
                      (DataMessage srcObject) => srcObject.localTopic):
                  object.messages
            },
        getId: (LocalTopic object) => object.id,
        setId: (LocalTopic object, int id) {
          object.id = id;
        },
        objectToFB: (LocalTopic object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LocalTopic(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          InternalToManyAccess.setRelInfo(
            object.messages,
            store,
            RelInfo<DataMessage>.toOneBacklink(
                14, object.id, (DataMessage srcObject) => srcObject.localTopic),
          );
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [DataMessage] entity fields to define ObjectBox queries.
class DataMessage_ {
  /// see [DataMessage.topic]
  static final topic =
      QueryStringProperty<DataMessage>(_entities[0].properties[0]);

  /// see [DataMessage.from]
  static final from =
      QueryStringProperty<DataMessage>(_entities[0].properties[1]);

  /// see [DataMessage.ts]
  static final ts =
      QueryIntegerProperty<DataMessage>(_entities[0].properties[2]);

  /// see [DataMessage.seq]
  static final seq =
      QueryIntegerProperty<DataMessage>(_entities[0].properties[3]);

  /// see [DataMessage.noForwarding]
  static final noForwarding =
      QueryBooleanProperty<DataMessage>(_entities[0].properties[4]);

  /// see [DataMessage.hi]
  static final hi =
      QueryIntegerProperty<DataMessage>(_entities[0].properties[5]);

  /// see [DataMessage.mark]
  static final mark =
      QueryIntegerProperty<DataMessage>(_entities[0].properties[6]);

  /// see [DataMessage.dbHead]
  static final dbHead =
      QueryStringProperty<DataMessage>(_entities[0].properties[7]);

  /// see [DataMessage.dbContent]
  static final dbContent =
      QueryStringProperty<DataMessage>(_entities[0].properties[8]);

  /// see [DataMessage.combinedId]
  static final combinedId =
      QueryStringProperty<DataMessage>(_entities[0].properties[9]);

  /// see [DataMessage.localTopic]
  static final localTopic =
      QueryRelationToOne<DataMessage, LocalTopic>(_entities[0].properties[10]);

  /// see [DataMessage.id]
  static final id =
      QueryIntegerProperty<DataMessage>(_entities[0].properties[11]);
}

/// [LocalTopic] entity fields to define ObjectBox queries.
class LocalTopic_ {
  /// see [LocalTopic.id]
  static final id =
      QueryIntegerProperty<LocalTopic>(_entities[1].properties[0]);

  /// see [LocalTopic.name]
  static final name =
      QueryStringProperty<LocalTopic>(_entities[1].properties[1]);
}
